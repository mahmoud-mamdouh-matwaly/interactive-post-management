{"version":3,"file":"static/js/348.33dca4c5.chunk.js","mappings":"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","sources":["components/input/index.jsx","pages/posts/components/form.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Textarea, Input, Text } from '@chakra-ui/react';\n\nconst FormikInput = props => {\n  const {\n    label,\n    handleChange,\n    handleBlur,\n    value,\n    hasError,\n    messageError,\n    readOnly = false,\n    isTextArea = false,\n    name,\n  } = props;\n\n  return (\n    <>\n      <label htmlFor={label}>{label} : </label>\n      {!isTextArea && (\n        <Input\n          id={label}\n          name={name}\n          type=\"text\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={value}\n          readOnly={readOnly}\n          disabled={readOnly}\n          placeholder={label}\n        />\n      )}\n      {isTextArea && (\n        <Textarea\n          id={label}\n          name={name}\n          type=\"text\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={value}\n          readOnly={readOnly}\n          disabled={readOnly}\n          placeholder={label}\n        />\n      )}\n      {hasError ? <Text color=\"red.500\">{messageError}</Text> : null}\n    </>\n  );\n};\nexport default FormikInput;\nFormikInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handleBlur: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  hasError: PropTypes.bool,\n  messageError: PropTypes.string,\n  readOnly: PropTypes.bool,\n  isTextArea: PropTypes.bool,\n  name: PropTypes.string,\n};\n","import { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport BaseButton from 'components/button';\nimport { useFormik } from 'formik';\nimport { Flex, Box, Spacer } from '@chakra-ui/react';\nimport FormikInput from 'components/input';\nimport { object, string } from 'yup';\n\nconst validationSchema = object({\n  title: string().required('Title is required'),\n  body: string().required('Description is required'),\n});\n\nconst PostForm = props => {\n  const { postItem, handleSubmit = () => {}, isView = false } = props;\n\n  const formik = useFormik({\n    initialValues: {\n      title: postItem?.title,\n      body: postItem?.body,\n    },\n    enableReinitialize: true,\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      handleSubmit({ ...values });\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <Flex direction={isView ? 'column' : 'row'} w=\"100%\">\n        <Box w={isView ? '100%' : '48%'}>\n          <FormikInput\n            label=\"Title\"\n            handleChange={formik.handleChange}\n            handleBlur={formik.handleBlur}\n            value={formik.values.title}\n            hasError={!!(formik.touched.title && formik.errors.title)}\n            messageError={formik.errors.title}\n            name=\"title\"\n            readOnly={isView}\n          />\n        </Box>\n        <Spacer />\n        <Box w={isView ? '100%' : '48%'}>\n          <FormikInput\n            label=\"Description\"\n            handleChange={formik.handleChange}\n            handleBlur={formik.handleBlur}\n            value={formik.values.body}\n            hasError={!!(formik.touched.body && formik.errors.body)}\n            messageError={formik.errors.body}\n            isTextArea={true}\n            name=\"body\"\n            readOnly={isView}\n          />\n        </Box>\n      </Flex>\n      {!isView ? (\n        <Flex w=\"100%\" align=\"center\" justify={'end'} my=\"md\">\n          <BaseButton type=\"primary\" htmlType=\"submit\" text=\"Submit\" bg=\"blue.600\" color=\"white\" />\n        </Flex>\n      ) : null}\n    </form>\n  );\n};\n\nexport default memo(PostForm);\n\nPostForm.propTypes = {\n  handleSubmit: PropTypes.func,\n  postItem: PropTypes.object,\n  isView: PropTypes.bool,\n};\n"],"names":["props","label","handleChange","handleBlur","value","hasError","messageError","_props$readOnly","readOnly","_props$isTextArea","isTextArea","name","_jsxs","_Fragment","children","htmlFor","_jsx","Input","id","type","onChange","onBlur","disabled","placeholder","Textarea","Text","color","validationSchema","object","title","string","required","body","PostForm","postItem","_props$handleSubmit","handleSubmit","_props$isView","isView","formik","useFormik","initialValues","enableReinitialize","onSubmit","values","_objectSpread","Flex","direction","w","Box","FormikInput","touched","errors","Spacer","align","justify","my","BaseButton","htmlType","text","bg","memo"],"sourceRoot":""}