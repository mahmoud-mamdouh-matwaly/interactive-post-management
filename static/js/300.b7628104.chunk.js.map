{"version":3,"file":"static/js/300.b7628104.chunk.js","mappings":"wQAKMA,EAAa,SAAAC,GACjB,IAAAC,EAAqGD,EAA7FE,KAAAA,OAAI,IAAAD,EAAG,GAAEA,EAAEE,EAAkFH,EAAlFG,QAAOC,EAA2EJ,EAAzEK,WAAAA,OAAU,IAAAD,GAAQA,EAAAE,EAAuDN,EAArDO,KAAAA,OAAI,IAAAD,EAAG,UAASA,EAAAE,EAAqCR,EAAnCS,QAAAA,OAAO,IAAAD,GAAQA,EAAEE,EAAkBV,EAAlBU,KAASC,GAAIC,EAAAA,EAAAA,GAAKZ,EAAKa,GAE1G,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAMC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACT,KAAMA,EAAMU,UAAWR,EAASN,QAASA,EAASE,WAAYA,GAAgBM,GAAI,IAAAO,SAAA,EACxFC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAF,SAAEhB,IACNQ,KAGP,EAEA,KAAeW,EAAAA,EAAAA,MAAKtB,E,uDCZpBuB,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAcF,EAAdE,eAAgBC,EAAKH,EAALG,MAElBC,EAAY,SAAHC,GAA2B,IAArBpB,EAAIoB,EAAJpB,KAAMqB,EAAOD,EAAPC,QAmBzB,OAlBAC,EAAAA,EAAAA,YAAU,WACJtB,EAAKuB,SAAS,YAChBL,EAAM,CACJM,YAAaH,EACbI,OAAQ,UACRC,YAAY,EACZC,SAAU,QAGV3B,EAAKuB,SAAS,UAChBL,EAAM,CACJM,YAAaH,EACbI,OAAQ,QACRC,YAAY,EACZC,SAAU,OAGhB,GAAG,CAACC,SACGhB,EAAAA,EAAAA,KAACK,EAAc,GACxB,EAEA,KAAeH,EAAAA,EAAAA,MAAKK,E,8RC2BpB,EAlDkB,SAAA1B,GAChB,IACEoC,EASEpC,EATFoC,YACAnB,EAQEjB,EARFiB,UACAoB,EAOErC,EAPFqC,aACAC,EAMEtC,EANFsC,aACApB,EAKElB,EALFkB,SAAQqB,EAKNvC,EAJFwC,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EACVE,EAGEzC,EAHFyC,OAAMC,EAGJ1C,EAFF2C,OAAAA,OAAM,IAAAD,GAAQA,EAAAtC,EAEZJ,EADFK,WAAAA,OAAU,IAAAD,GAAQA,EAGpB,OACEU,EAAAA,EAAAA,MAAC8B,EAAAA,GAAK,CACJJ,MAAOA,EACPK,OAAQT,EACRU,KAAMR,EACNS,SAAUV,EACVI,OAAQA,EACRO,eAAgB/B,EAAUC,SAAA,EAE1BC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAY,KACbnC,EAAAA,EAAAA,MAACoC,EAAAA,EAAY,CAAAhC,SAAA,EACXC,EAAAA,EAAAA,KAACgC,EAAAA,EAAS,CAAAjC,SAAEA,KACZJ,EAAAA,EAAAA,MAACsC,EAAAA,EAAW,CAAAlC,SAAA,EACVC,EAAAA,EAAAA,KAACpB,EAAAA,EAAU,CAAYQ,KAAK,UAAUJ,QAASkC,EAAcnC,KAAK,UAAlD,QACfuC,IACCtB,EAAAA,EAAAA,KAACpB,EAAAA,EAAU,CAETQ,KAAK,UACLL,KAAMuC,EACNhC,QAASQ,EACTd,QAASmC,EACTjC,WAAYA,EACZgD,GAAG,KACHC,GAAIX,EAAS,UAAY,WACzBY,MAAOZ,EAAS,QAAU,QAC1Ba,OAAQ,CACNF,GAAIX,EAAS,UAAY,WACzBY,MAAO,UAXL,kBAmBlB,ECvCME,GAAOC,EAAAA,EAAAA,OAAK,kBAAM,oDAAqC,IACvDC,GAAcD,EAAAA,EAAAA,OAAK,kBAAM,6BAA6C,IA0G5E,EAxGkB,WAChB,IAAME,GAAWC,EAAAA,EAAAA,MACjBC,GAAsDC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAY,IAArFC,EAAIJ,EAAJI,KAAMjD,EAAS6C,EAAT7C,UAAWkD,EAAUL,EAAVK,WAAYC,EAAYN,EAAZM,aAGIC,GAArCN,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMM,SAAS,IADtCnC,MAAS5B,EAAI8D,EAAJ9D,KAAMqB,EAAOyC,EAAPzC,QAEX2C,GAAWC,EAAAA,EAAAA,MAEjBC,GAAkCC,EAAAA,EAAAA,UAAS,CAAE7B,QAAQ,EAAO8B,GAAI,KAAMC,KAAM,OAAOC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAA5EM,EAASF,EAAA,GAAEG,EAAYH,EAAA,IAE9BhD,EAAAA,EAAAA,YAAU,WACC,OAAJqC,QAAI,IAAJA,GAAAA,EAAMe,QACTV,GAASW,EAAAA,EAAAA,MAEb,GAAG,CAAChB,KAEJrC,EAAAA,EAAAA,YAAU,WACJuC,EAAatC,SAAS,aACxBO,IACAkC,GAASY,EAAAA,EAAAA,OAEb,GAAG,CAACf,IAEJ,IAAMgB,GAAkBC,EAAAA,EAAAA,cAAY,SAAAT,GAClCL,GAASe,EAAAA,EAAAA,IAAYV,IACrBhB,EAAS,6CAAD2B,OAA8CX,EAAKD,IAC7D,GAAG,IAEGa,GAAkBH,EAAAA,EAAAA,cAAY,SAAAT,GAClCI,GAAa,SAAAS,GACX,MAAO,CACL5C,QAAS4C,EAAK5C,OACd8B,GAAQ,OAAJC,QAAI,IAAJA,OAAI,EAAJA,EAAMD,GACVC,KAAMA,EAEV,GACF,GAAG,IAEGc,GAAeL,EAAAA,EAAAA,cAAY,SAAAT,GAC/BI,GAAa,SAAAS,GACX,OAAAzE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKyE,GAAI,IACP5C,QAAS4C,EAAK5C,OACd8B,GAAQ,OAAJC,QAAI,IAAJA,OAAI,EAAJA,EAAMD,IAEd,GACF,GAAG,IAMGgB,GAAqBN,EAAAA,EAAAA,cACzB,SAAAO,GACErB,GAASsB,EAAAA,EAAAA,IAAcD,EAAME,OAAOC,OACtC,GACA,CAACxB,IAGGlC,EAAe,WACnB2C,EAAa,CACXnC,QAAQ,EACR8B,GAAI,KACJC,KAAM,MAEV,EAEMoB,GAAgBC,EAAAA,EAAAA,UAAQ,WAC5B,OAAW,OAAJ/B,QAAI,IAAJA,OAAI,EAAJA,EAAMgC,QAAO,SAAAC,GAAI,OAAQ,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAM3D,MAAM4D,cAActE,SAASqC,EAAWiC,cAAc,GAC1F,GAAG,CAACjC,EAAYD,IAEhB,OACEpD,EAAAA,EAAAA,MAACuF,EAAAA,EAAI,CAACC,UAAU,SAAShD,GAAG,QAAQiD,GAAG,KAAKC,GAAG,KAAItF,SAAA,EACjDC,EAAAA,EAAAA,KAACsF,EAAAA,SAAQ,CAACC,UAAUvF,EAAAA,EAAAA,KAACwF,EAAAA,EAAO,IAAIzF,UAC9BC,EAAAA,EAAAA,KAACwC,EAAW,CAACnB,MAAM,QAAQoE,WAAW,EAAMjB,mBAAoBA,OAElE7E,EAAAA,EAAAA,MAAC+F,EAAAA,EAAI,CAACC,gBAAgB,iBAAiBC,IAAK,EAAE7F,SAAA,EAC5CC,EAAAA,EAAAA,KAAC6F,EAAAA,EAAQ,CAAA9F,SAAC,WACVC,EAAAA,EAAAA,KAAC6F,EAAAA,EAAQ,CAAA9F,SAAC,iBACVC,EAAAA,EAAAA,KAAC6F,EAAAA,EAAQ,CAAA9F,SAAC,YACT8E,EAAciB,KAAI,SAAAd,GACjB,OACEhF,EAAAA,EAAAA,KAAC+F,EAAQ,CAEPf,KAAMA,EACNX,gBAAiBA,EACjBJ,gBAAiBA,EACjBM,aAAcA,GAJTS,EAAKxB,GAOhB,QAGFxD,EAAAA,EAAAA,KAACgG,EAAe,CACd9E,aAAcA,EACdC,aA/CyB,WAC7BiC,GAAS6C,EAAAA,EAAAA,IAAe,CAAEzC,GAAII,EAAUJ,KAC1C,EA8CMI,UAAWA,EACX9D,UAAWA,IAEZV,GAAOY,EAAAA,EAAAA,KAACO,EAAAA,EAAS,CAACnB,KAAMA,EAAMqB,QAASA,IAAc,OAG5D,EAIMuF,GAAkB9F,EAAAA,EAAAA,OAAK,SAAArB,GAC3B,IAAQqC,EAAqDrC,EAArDqC,aAAcC,EAAuCtC,EAAvCsC,aAAcyC,EAAyB/E,EAAzB+E,UAAW9D,EAAcjB,EAAdiB,UAE/C,OACEH,EAAAA,EAAAA,MAAAuG,EAAAA,SAAA,CAAAnG,SAAA,EACEC,EAAAA,EAAAA,KAACmG,EAAS,CACRjF,aAAcA,EACdC,aAAcA,EACdF,YAAa2C,EAAUlC,SAAWkC,EAAUH,KAC5CnC,OAAO,SACPxB,UAAWA,EACX0B,QAAM,EAAAzB,UAENC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAF,SAAC,mDAGRC,EAAAA,EAAAA,KAACmG,EAAS,CACRjF,aAAcA,EACdC,aAAcA,EACdF,YAAa2C,EAAUlC,UAAYkC,EAAUH,KAC7C3D,UAAWA,EAAUC,UAErBC,EAAAA,EAAAA,KAACsF,EAAAA,SAAQ,CAACC,UAAUvF,EAAAA,EAAAA,KAACwF,EAAAA,EAAO,IAAIzF,UAC9BC,EAAAA,EAAAA,KAACsC,EAAI,CAAC8D,SAAmB,OAATxC,QAAS,IAATA,OAAS,EAATA,EAAWH,KAAM4C,QAAQ,UAKnD,IAaMN,GAAW7F,EAAAA,EAAAA,OAAK,SAAArB,GACpB,IAAQmG,EAAyDnG,EAAzDmG,KAAMX,EAAmDxF,EAAnDwF,gBAAiBJ,EAAkCpF,EAAlCoF,gBAAiBM,EAAiB1F,EAAjB0F,aAChD,OACE5E,EAAAA,EAAAA,MAAAuG,EAAAA,SAAA,CAAAnG,SAAA,EACEC,EAAAA,EAAAA,KAAC6F,EAAAA,EAAQ,CAAA9F,UACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAF,SAAEiF,EAAK3D,WAEdrB,EAAAA,EAAAA,KAAC6F,EAAAA,EAAQ,CAAA9F,UACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAF,SAAEiF,EAAKsB,UAEdtG,EAAAA,EAAAA,KAAC6F,EAAAA,EAAQ,CAAA9F,UACPJ,EAAAA,EAAAA,MAACuF,EAAAA,EAAI,CAAAnF,SAAA,EACHC,EAAAA,EAAAA,KAACpB,EAAAA,EAAU,CACTQ,KAAK,OACLG,MAAMS,EAAAA,EAAAA,KAACuG,EAAAA,EAAQ,IACfvH,QAAS,kBAAMqF,EAAgBW,EAAK,EACpCwB,EAAE,IACFrE,GAAG,cACHsE,EAAE,IACFpE,OAAQ,CACNF,GAAI,WACJC,MAAO,YAGXpC,EAAAA,EAAAA,KAACpB,EAAAA,EAAU,CACTQ,KAAK,OACLG,MAAMS,EAAAA,EAAAA,KAAC0G,EAAAA,EAAQ,IACf1H,QAAS,kBAAMiF,EAAgBe,EAAK,EACpCwB,EAAE,IACFrE,GAAG,cACHC,MAAM,WACNC,OAAQ,CACNF,GAAI,WACJC,MAAO,YAGXpC,EAAAA,EAAAA,KAACpB,EAAAA,EAAU,CACTQ,KAAK,OACLG,MAAMS,EAAAA,EAAAA,KAAC2G,EAAAA,EAAU,IACjBnF,QAAM,EACNxC,QAAS,kBAAMuF,EAAaS,EAAK,EACjC7C,GAAG,cACHqE,EAAE,IACFpE,MAAM,UACNC,OAAQ,CACNF,GAAI,UACJC,MAAO,kBAOrB,G","sources":["components/button/index.jsx","components/toast/index.jsx","components/modal/index.jsx","pages/posts/index.jsx"],"sourcesContent":["// import { Button } from 'antd';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Text } from '@chakra-ui/react';\n\nconst BaseButton = props => {\n  const { text = '', onClick, isDisabled = false, type = 'primary', loading = false, icon, ...rest } = props;\n\n  return (\n    <Button type={type} isLoading={loading} onClick={onClick} isDisabled={isDisabled} {...rest}>\n      <Text>{text}</Text>\n      {icon}\n    </Button>\n  );\n};\n\nexport default memo(BaseButton);\n\nBaseButton.propTypes = {\n  text: PropTypes.string,\n  onClick: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  type: PropTypes.string,\n  loading: PropTypes.bool,\n  icon: PropTypes.node,\n};\n","import { memo, useEffect } from 'react';\nimport { createStandaloneToast } from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\n\nconst { ToastContainer, toast } = createStandaloneToast();\n\nconst BaseToast = ({ type, message }) => {\n  useEffect(() => {\n    if (type.includes('success')) {\n      toast({\n        description: message,\n        status: 'success',\n        isClosable: true,\n        position: 'top',\n      });\n    }\n    if (type.includes('error')) {\n      toast({\n        description: message,\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n      });\n    }\n  }, [alert]);\n  return <ToastContainer />;\n};\n\nexport default memo(BaseToast);\n\nBaseToast.propTypes = {\n  text: PropTypes.string,\n  message: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport BaseButton from 'components/button';\n\nimport { Modal, ModalOverlay, ModalContent, ModalFooter, ModalBody } from '@chakra-ui/react';\n\nconst BaseModal = props => {\n  const {\n    isModalOpen,\n    isLoading,\n    handleCancel,\n    handleSubmit,\n    children,\n    title = '',\n    okText,\n    danger = false,\n    isDisabled = false,\n  } = props;\n\n  return (\n    <Modal\n      title={title}\n      isOpen={isModalOpen}\n      onOk={handleSubmit}\n      onCancel={handleCancel}\n      okText={okText}\n      confirmLoading={isLoading}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalBody>{children}</ModalBody>\n        <ModalFooter>\n          <BaseButton key=\"back\" type=\"default\" onClick={handleCancel} text=\"Cancel\" />\n          {okText && (\n            <BaseButton\n              key=\"submit\"\n              type=\"primary\"\n              text={okText}\n              loading={isLoading}\n              onClick={handleSubmit}\n              isDisabled={isDisabled}\n              ml=\"md\"\n              bg={danger ? 'red.500' : 'gray.100'}\n              color={danger ? 'white' : 'black'}\n              _hover={{\n                bg: danger ? 'red.500' : 'gray.100',\n                color: 'white',\n              }}\n            />\n          )}\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default BaseModal;\n\nBaseModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleSubmit: PropTypes.func,\n  handleCancel: PropTypes.func,\n  isLoading: PropTypes.bool,\n  children: PropTypes.node,\n  title: PropTypes.string,\n  okText: PropTypes.string,\n  danger: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n};\n","import { useEffect, Suspense, lazy, useCallback, useMemo, useState, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { fetchPosts, setPostItem, setSearchTerm, deletePostItem, resetDeleteStatus } from './store/slice';\n\nimport { Text, Flex, Spinner, Grid, GridItem } from '@chakra-ui/react';\nimport { DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons';\n\nimport BaseButton from 'components/button';\nimport BaseToast from 'components/toast';\nimport BaseModal from 'components/modal';\n\nconst Form = lazy(() => import('pages/posts/components/form'));\nconst PageHeading = lazy(() => import('pages/posts/components/page-heading'));\n\nconst PostsPage = () => {\n  const navigate = useNavigate();\n  const { data, isLoading, searchTerm, deleteStatus } = useSelector(state => state.postsReducer);\n  const {\n    alert: { type, message },\n  } = useSelector(state => state.uiReducer);\n  const dispatch = useDispatch();\n\n  const [showModal, setShowModal] = useState({ isOpen: false, id: null, item: null });\n\n  useEffect(() => {\n    if (!data?.length) {\n      dispatch(fetchPosts());\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (deleteStatus.includes('success')) {\n      handleCancel();\n      dispatch(resetDeleteStatus());\n    }\n  }, [deleteStatus]);\n\n  const handleClickEdit = useCallback(item => {\n    dispatch(setPostItem(item));\n    navigate(`/interactive-post-management/post-details/${item.id}`);\n  }, []);\n\n  const handleClickView = useCallback(item => {\n    setShowModal(prev => {\n      return {\n        isOpen: !prev.isOpen,\n        id: item?.id,\n        item: item,\n      };\n    });\n  }, []);\n\n  const handleDelete = useCallback(item => {\n    setShowModal(prev => {\n      return {\n        ...prev,\n        isOpen: !prev.isOpen,\n        id: item?.id,\n      };\n    });\n  }, []);\n\n  const handleSubmitDeletePost = () => {\n    dispatch(deletePostItem({ id: showModal.id }));\n  };\n\n  const handleChangeSearch = useCallback(\n    event => {\n      dispatch(setSearchTerm(event.target.value));\n    },\n    [dispatch]\n  );\n\n  const handleCancel = () => {\n    setShowModal({\n      isOpen: false,\n      id: null,\n      item: null,\n    });\n  };\n\n  const filteredPosts = useMemo(() => {\n    return data?.filter(post => post?.title.toLowerCase().includes(searchTerm.toLowerCase()));\n  }, [searchTerm, data]);\n\n  return (\n    <Flex direction=\"column\" bg=\"white\" px=\"sm\" py=\"xl\">\n      <Suspense fallback={<Spinner />}>\n        <PageHeading title=\"Posts\" hasSearch={true} handleChangeSearch={handleChangeSearch} />\n      </Suspense>\n      <Grid templateColumns=\"repeat(3, 1fr)\" gap={6}>\n        <GridItem>Title</GridItem>\n        <GridItem>Description</GridItem>\n        <GridItem>Actions</GridItem>\n        {filteredPosts.map(post => {\n          return (\n            <PostItem\n              key={post.id}\n              post={post}\n              handleClickView={handleClickView}\n              handleClickEdit={handleClickEdit}\n              handleDelete={handleDelete}\n            />\n          );\n        })}\n      </Grid>\n\n      <ModalsContainer\n        handleCancel={handleCancel}\n        handleSubmit={handleSubmitDeletePost}\n        showModal={showModal}\n        isLoading={isLoading}\n      />\n      {type ? <BaseToast type={type} message={message} /> : null}\n    </Flex>\n  );\n};\n\nexport default PostsPage;\n\nconst ModalsContainer = memo(props => {\n  const { handleCancel, handleSubmit, showModal, isLoading } = props;\n\n  return (\n    <>\n      <BaseModal\n        handleCancel={handleCancel}\n        handleSubmit={handleSubmit}\n        isModalOpen={showModal.isOpen && !showModal.item}\n        okText=\"Delete\"\n        isLoading={isLoading}\n        danger\n      >\n        <Text>Are you sure, you want to delete this post?</Text>\n      </BaseModal>\n\n      <BaseModal\n        handleCancel={handleCancel}\n        handleSubmit={handleSubmit}\n        isModalOpen={showModal.isOpen && !!showModal.item}\n        isLoading={isLoading}\n      >\n        <Suspense fallback={<Spinner />}>\n          <Form postItem={showModal?.item} isView={true} />\n        </Suspense>\n      </BaseModal>\n    </>\n  );\n});\n\nModalsContainer.propTypes = {\n  handleCancel: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  showModal: PropTypes.shape({\n    isOpen: PropTypes.bool,\n    item: PropTypes.object,\n    id: PropTypes.number,\n  }),\n  isLoading: PropTypes.bool,\n};\n\nconst PostItem = memo(props => {\n  const { post, handleClickView, handleClickEdit, handleDelete } = props;\n  return (\n    <>\n      <GridItem>\n        <Text>{post.title}</Text>\n      </GridItem>\n      <GridItem>\n        <Text>{post.body}</Text>\n      </GridItem>\n      <GridItem>\n        <Flex>\n          <BaseButton\n            type=\"text\"\n            icon={<ViewIcon />}\n            onClick={() => handleClickView(post)}\n            p=\"0\"\n            bg=\"transparent\"\n            m=\"0\"\n            _hover={{\n              bg: 'gray.700',\n              color: 'white',\n            }}\n          />\n          <BaseButton\n            type=\"text\"\n            icon={<EditIcon />}\n            onClick={() => handleClickEdit(post)}\n            p=\"0\"\n            bg=\"transparent\"\n            color=\"blue.500\"\n            _hover={{\n              bg: 'blue.500',\n              color: 'white',\n            }}\n          />\n          <BaseButton\n            type=\"text\"\n            icon={<DeleteIcon />}\n            danger\n            onClick={() => handleDelete(post)}\n            bg=\"transparent\"\n            p=\"0\"\n            color=\"red.500\"\n            _hover={{\n              bg: 'red.500',\n              color: 'white',\n            }}\n          />\n        </Flex>\n      </GridItem>\n    </>\n  );\n});\n\nPostItem.propTypes = {\n  handleClickEdit: PropTypes.func,\n  handleDelete: PropTypes.func,\n  handleClickView: PropTypes.func,\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n  }),\n};\n"],"names":["BaseButton","props","_props$text","text","onClick","_props$isDisabled","isDisabled","_props$type","type","_props$loading","loading","icon","rest","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","isLoading","children","_jsx","Text","memo","_createStandaloneToas","createStandaloneToast","ToastContainer","toast","BaseToast","_ref","message","useEffect","includes","description","status","isClosable","position","alert","isModalOpen","handleCancel","handleSubmit","_props$title","title","okText","_props$danger","danger","Modal","isOpen","onOk","onCancel","confirmLoading","ModalOverlay","ModalContent","ModalBody","ModalFooter","ml","bg","color","_hover","Form","lazy","PageHeading","navigate","useNavigate","_useSelector","useSelector","state","postsReducer","data","searchTerm","deleteStatus","_useSelector2$alert","uiReducer","dispatch","useDispatch","_useState","useState","id","item","_useState2","_slicedToArray","showModal","setShowModal","length","fetchPosts","resetDeleteStatus","handleClickEdit","useCallback","setPostItem","concat","handleClickView","prev","handleDelete","handleChangeSearch","event","setSearchTerm","target","value","filteredPosts","useMemo","filter","post","toLowerCase","Flex","direction","px","py","Suspense","fallback","Spinner","hasSearch","Grid","templateColumns","gap","GridItem","map","PostItem","ModalsContainer","deletePostItem","_Fragment","BaseModal","postItem","isView","body","ViewIcon","p","m","EditIcon","DeleteIcon"],"sourceRoot":""}