{"version":3,"file":"static/js/348.20895564.chunk.js","mappings":"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","sources":["components/input/index.jsx","pages/posts/components/form.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Textarea, Input, Text } from '@chakra-ui/react';\n\nconst FormikInput = props => {\n  const { label, handleChange, value, hasError, messageError, readOnly = false, isTextArea = false, name } = props;\n\n  return (\n    <>\n      <label htmlFor={label}>{label} : </label>\n      {!isTextArea && (\n        <Input\n          id={label}\n          name={name}\n          type=\"text\"\n          onChange={handleChange}\n          value={value}\n          readOnly={readOnly}\n          disabled={readOnly}\n          placeholder={label}\n        />\n      )}\n      {isTextArea && (\n        <Textarea\n          id={label}\n          name={name}\n          type=\"text\"\n          onChange={handleChange}\n          value={value}\n          readOnly={readOnly}\n          disabled={readOnly}\n          placeholder={label}\n        />\n      )}\n      {hasError ? <Text color=\"red.500\">{messageError}</Text> : null}\n    </>\n  );\n};\nexport default FormikInput;\n\nFormikInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  hasError: PropTypes.bool,\n  messageError: PropTypes.string,\n  readOnly: PropTypes.bool,\n  isTextArea: PropTypes.bool,\n  name: PropTypes.string,\n};\n","import { memo, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport BaseButton from 'components/button';\nimport { useFormik } from 'formik';\nimport { Flex, Box, Spacer } from '@chakra-ui/react';\nimport FormikInput from 'components/input';\nimport { object, string } from 'yup';\n\nconst validationSchema = object({\n  title: string().required('Title is required'),\n  body: string().required('Description is required'),\n});\n\nconst PostForm = props => {\n  const { postItem, handleSubmit = () => {}, isView = false } = props;\n  const [disabled, setDisabled] = useState(true);\n\n  const formik = useFormik({\n    initialValues: {\n      title: postItem?.title,\n      body: postItem?.body,\n    },\n    enableReinitialize: true,\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      handleSubmit({ ...values });\n    },\n  });\n\n  const handleChange = useCallback(e => {\n    formik.handleChange(e);\n    setDisabled(false);\n  }, []);\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <Flex direction={isView ? 'column' : 'row'} w=\"100%\">\n        <Box w={isView ? '100%' : '48%'}>\n          <FormikInput\n            label=\"Title\"\n            handleChange={handleChange}\n            value={formik.values.title}\n            hasError={!!(formik.touched.title && formik.errors.title)}\n            messageError={formik.errors.title}\n            name=\"title\"\n            readOnly={isView}\n          />\n        </Box>\n        <Spacer />\n        <Box w={isView ? '100%' : '48%'}>\n          <FormikInput\n            label=\"Description\"\n            handleChange={handleChange}\n            value={formik.values.body}\n            hasError={!!(formik.touched.body && formik.errors.body)}\n            messageError={formik.errors.body}\n            isTextArea={true}\n            name=\"body\"\n            readOnly={isView}\n          />\n        </Box>\n      </Flex>\n      {!isView ? (\n        <Flex w=\"100%\" align=\"center\" justify={'end'} my=\"md\">\n          <BaseButton\n            type=\"primary\"\n            htmlType=\"submit\"\n            text=\"Submit\"\n            bg=\"blue.600\"\n            color=\"white\"\n            isDisabled={disabled}\n          />\n        </Flex>\n      ) : null}\n    </form>\n  );\n};\n\nexport default memo(PostForm);\n\nPostForm.propTypes = {\n  handleSubmit: PropTypes.func,\n  postItem: PropTypes.object,\n  isView: PropTypes.bool,\n};\n"],"names":["props","label","handleChange","value","hasError","messageError","_props$readOnly","readOnly","_props$isTextArea","isTextArea","name","_jsxs","_Fragment","children","htmlFor","_jsx","Input","id","type","onChange","disabled","placeholder","Textarea","Text","color","validationSchema","object","title","string","required","body","PostForm","postItem","_props$handleSubmit","handleSubmit","_props$isView","isView","_useState","useState","_useState2","_slicedToArray","setDisabled","formik","useFormik","initialValues","enableReinitialize","onSubmit","values","_objectSpread","useCallback","e","Flex","direction","w","Box","FormikInput","touched","errors","Spacer","align","justify","my","BaseButton","htmlType","text","bg","isDisabled","memo"],"sourceRoot":""}