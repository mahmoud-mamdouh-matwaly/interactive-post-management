{"version":3,"file":"static/js/300.6925c5f1.chunk.js","mappings":"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","sources":["components/button/index.jsx","components/message/index.jsx","components/modal/index.jsx","pages/posts/index.jsx"],"sourcesContent":["// import { Button } from 'antd';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Text } from '@chakra-ui/react';\n\nconst BaseButton = props => {\n  const { text = '', onClick, isDisabled = false, type = 'primary', loading = false, icon, ...rest } = props;\n\n  return (\n    <Button type={type} isLoading={loading} onClick={onClick} isDisabled={isDisabled} {...rest}>\n      <Text>{text}</Text>\n      {icon}\n    </Button>\n  );\n};\n\nexport default memo(BaseButton);\n\nBaseButton.propTypes = {\n  text: PropTypes.string,\n  onClick: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  type: PropTypes.string,\n  loading: PropTypes.bool,\n  icon: PropTypes.node,\n};\n","import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { createStandaloneToast } from '@chakra-ui/react';\nconst { ToastContainer, toast } = createStandaloneToast();\n\nconst BaseMessage = () => {\n  const {\n    alert: { type, message: text },\n  } = useSelector(state => state.uiReducer);\n\n  useEffect(() => {\n    if (type === 'success') {\n      toast({\n        description: text,\n        status: 'success',\n        isClosable: true,\n        position: 'top',\n      });\n    }\n    if (type === 'error' || type === 'networkError') {\n      toast({\n        description: text,\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n      });\n    }\n  }, [alert]);\n  return <ToastContainer />;\n};\n\nexport default BaseMessage;\n","import PropTypes from 'prop-types';\nimport BaseButton from 'components/button';\n\nimport { Modal, ModalOverlay, ModalContent, ModalFooter, ModalBody } from '@chakra-ui/react';\n\nconst BaseModal = props => {\n  const {\n    isModalOpen,\n    isLoading,\n    handleCancel,\n    handleSubmit,\n    children,\n    title = '',\n    okText,\n    danger = false,\n    isDisabled = false,\n  } = props;\n\n  return (\n    <Modal\n      title={title}\n      isOpen={isModalOpen}\n      onOk={handleSubmit}\n      onCancel={handleCancel}\n      okText={okText}\n      confirmLoading={isLoading}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalBody>{children}</ModalBody>\n        <ModalFooter>\n          <BaseButton key=\"back\" type=\"default\" onClick={handleCancel} text=\"Cancel\" />\n          {okText && (\n            <BaseButton\n              key=\"submit\"\n              type=\"primary\"\n              text={okText}\n              loading={isLoading}\n              onClick={handleSubmit}\n              isDisabled={isDisabled}\n              ml=\"md\"\n              bg={danger ? 'red.500' : 'gray.100'}\n              color={danger ? 'white' : 'black'}\n              _hover={{\n                bg: danger ? 'red.500' : 'gray.100',\n                color: 'white',\n              }}\n            />\n          )}\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default BaseModal;\n\nBaseModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleSubmit: PropTypes.func,\n  handleCancel: PropTypes.func,\n  isLoading: PropTypes.bool,\n  children: PropTypes.node,\n  title: PropTypes.string,\n  okText: PropTypes.string,\n  danger: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n};\n","import React, { useEffect, Suspense, lazy, useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { fetchPosts, setPostItem, setSearchTerm, deletePostItem, resetDeleteStatus } from './store/slice';\n\nimport { Text, Flex, Spinner, Grid, GridItem } from '@chakra-ui/react';\nimport { DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons';\n\nimport BaseButton from 'components/button';\nimport BaseMessage from 'components/message';\nimport BaseModal from 'components/modal';\n\nconst Form = lazy(() => import('pages/posts/components/form'));\nconst PageHeading = lazy(() => import('pages/posts/components/page-heading'));\n\nconst PostsPage = () => {\n  const navigate = useNavigate();\n  const { data, isLoading, searchTerm, deleteStatus } = useSelector(state => state.postsReducer);\n  const {\n    alert: { type },\n  } = useSelector(state => state.uiReducer);\n  const dispatch = useDispatch();\n\n  const [showModal, setShowModal] = useState({ isOpen: false, id: null, item: null });\n\n  const handleClickEdit = useCallback(item => {\n    dispatch(setPostItem(item));\n    navigate(`/interactive-post-management/post-details/${item.id}`);\n  }, []);\n\n  const handleDelete = useCallback(item => {\n    setShowModal(prev => {\n      return {\n        ...prev,\n        isOpen: !prev.isOpen,\n        id: item?.id,\n      };\n    });\n  }, []);\n\n  const handleClickView = useCallback(item => {\n    setShowModal(prev => {\n      return {\n        isOpen: !prev.isOpen,\n        id: item?.id,\n        item: item,\n      };\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!data?.length) {\n      dispatch(fetchPosts());\n    }\n  }, [data]);\n\n  const handleChangeSearch = useCallback(\n    event => {\n      dispatch(setSearchTerm(event.target.value));\n    },\n    [dispatch]\n  );\n\n  const handleSubmitDeletePost = () => {\n    dispatch(deletePostItem({ id: showModal.id }));\n  };\n\n  const handleCancel = () => {\n    setShowModal({\n      isOpen: false,\n      id: null,\n      item: null,\n    });\n  };\n\n  useEffect(() => {\n    if (deleteStatus === 'success') {\n      handleCancel();\n      dispatch(resetDeleteStatus());\n    }\n  }, [deleteStatus]);\n\n  const filteredPosts = useMemo(() => {\n    return data.filter(post => post.title.toLowerCase().includes(searchTerm.toLowerCase()));\n  }, [searchTerm, data]);\n\n  return (\n    <Flex direction=\"column\" bg=\"white\" px=\"sm\" py=\"xl\">\n      <Suspense fallback={<Spinner />}>\n        <PageHeading title=\"Posts\" hasSearch={true} handleChangeSearch={handleChangeSearch} />\n      </Suspense>\n      <Grid templateColumns=\"repeat(3, 1fr)\" gap={6}>\n        <GridItem>Title</GridItem>\n        <GridItem>Description</GridItem>\n        <GridItem>Actions</GridItem>\n        {filteredPosts.map(post => {\n          return (\n            <React.Fragment key={post.id}>\n              <GridItem>\n                <Text>{post.title}</Text>\n              </GridItem>\n              <GridItem>\n                <Text>{post.body}</Text>\n              </GridItem>\n              <GridItem>\n                <Flex>\n                  <BaseButton\n                    className=\"btn\"\n                    type=\"text\"\n                    icon={<ViewIcon />}\n                    onClick={() => handleClickView(post)}\n                    p=\"0\"\n                    bg=\"transparent\"\n                    m=\"0\"\n                    _hover={{\n                      bg: 'gray.700',\n                      color: 'white',\n                    }}\n                  />\n                  <BaseButton\n                    className=\"btn\"\n                    type=\"text\"\n                    icon={<EditIcon />}\n                    onClick={() => handleClickEdit(post)}\n                    p=\"0\"\n                    bg=\"transparent\"\n                    color=\"blue.500\"\n                    _hover={{\n                      bg: 'blue.500',\n                      color: 'white',\n                    }}\n                  />\n                  <BaseButton\n                    className=\"btn\"\n                    type=\"text\"\n                    icon={<DeleteIcon />}\n                    danger\n                    onClick={() => handleDelete(post)}\n                    bg=\"transparent\"\n                    p=\"0\"\n                    color=\"red.500\"\n                    _hover={{\n                      bg: 'red.500',\n                      color: 'white',\n                    }}\n                  />\n                </Flex>\n              </GridItem>\n            </React.Fragment>\n          );\n        })}\n      </Grid>\n\n      {type ? <BaseMessage /> : null}\n      <ModalsContainer\n        handleCancel={handleCancel}\n        handleSubmit={handleSubmitDeletePost}\n        showModal={showModal}\n        isLoading={isLoading}\n        danger={true}\n      />\n    </Flex>\n  );\n};\n\nexport default PostsPage;\n\nfunction ModalsContainer(props) {\n  const { handleCancel, handleSubmit, showModal, isLoading } = props;\n\n  return (\n    <>\n      <BaseModal\n        handleCancel={handleCancel}\n        handleSubmit={handleSubmit}\n        isModalOpen={showModal.isOpen && !showModal.item}\n        okText=\"Delete\"\n        isLoading={isLoading}\n        danger={true}\n      >\n        <Text>Are you sure, you want to delete this post?</Text>\n      </BaseModal>\n\n      <BaseModal\n        handleCancel={handleCancel}\n        handleSubmit={handleSubmit}\n        isModalOpen={showModal.isOpen && !!showModal.item}\n        isLoading={isLoading}\n      >\n        <Suspense fallback={<Spinner />}>\n          <Form postItem={showModal?.item} isView={true} />\n        </Suspense>\n      </BaseModal>\n    </>\n  );\n}\n\nModalsContainer.propTypes = {\n  handleCancel: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  showModal: PropTypes.shape({\n    isOpen: PropTypes.bool,\n    item: PropTypes.object,\n    id: PropTypes.number,\n  }),\n  isLoading: PropTypes.bool,\n};\n"],"names":["BaseButton","props","_props$text","text","onClick","_props$isDisabled","isDisabled","_props$type","type","_props$loading","loading","icon","rest","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","isLoading","children","_jsx","Text","memo","_createStandaloneToas","createStandaloneToast","ToastContainer","toast","_useSelector$alert","useSelector","state","uiReducer","alert","message","useEffect","description","status","isClosable","position","isModalOpen","handleCancel","handleSubmit","_props$title","title","okText","_props$danger","danger","Modal","isOpen","onOk","onCancel","confirmLoading","ModalOverlay","ModalContent","ModalBody","ModalFooter","ml","bg","color","_hover","Form","lazy","PageHeading","navigate","useNavigate","_useSelector","postsReducer","data","searchTerm","deleteStatus","dispatch","useDispatch","_useState","useState","id","item","_useState2","_slicedToArray","showModal","setShowModal","handleClickEdit","useCallback","setPostItem","concat","handleDelete","prev","handleClickView","length","fetchPosts","handleChangeSearch","event","setSearchTerm","target","value","resetDeleteStatus","filteredPosts","useMemo","filter","post","toLowerCase","includes","Flex","direction","px","py","Suspense","fallback","Spinner","hasSearch","Grid","templateColumns","gap","GridItem","map","React","body","className","ViewIcon","p","m","EditIcon","DeleteIcon","BaseMessage","ModalsContainer","deletePostItem","_Fragment","BaseModal","postItem","isView"],"sourceRoot":""}